<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Number Connection Test-10D</title>
  <subtitle>yyy 2025-01-14</subtitle>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }

    h1 {
      text-align: center;
      margin: 16px 0;
    }

    #test-container {
      width: vmin;
      height: 80vmin;
      border: 2px solid #000;
      margin: 0 auto;
      position: relative;
      box-sizing: border-box;
      overflow: hidden;
    }

    .point {
      position: absolute;
      border: 3px solid black; 
      border-radius: 50%;
      background-color: transparent; 
      display: flex;
      justify-content: center;
      align-items: center;
      color: #000;
      font-weight: bold;
      user-select: none; /* 禁止用户选中数字 */
      cursor: pointer;
    }

    /* 被正确连接后，填充成黑色，数字变白 */
    .point.correct {
      background-color: black;
      color: white;
      border-color: black;
    }

    #control-panel {
      width: 80vmin;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 16px;
    }

    #refresh-btn {
      padding: 8px 16px;
      font-size: 1rem;
      cursor: pointer;
    }

    #message {
      flex: 1;
      margin-left: 16px;
      font-size: 1rem;
      color: #333;
    }

    #log {
      width: 80vmin;
      margin: 16px auto;
      white-space: pre-wrap;
      background: #f8f8f8;
      padding: 8px;
      border: 1px solid #ccc;
      font-size: 0.9rem;
      color: #333;
      display: none;
    }

    /* 虚线圆环（ghost ring）样式 */
    #ghost-ring {
      position: absolute;
      border: 3px dashed #f00; /* 红色虚线，可自行修改 */
      border-radius: 50%;
      pointer-events: none;    /* 让鼠标事件穿透，不阻挡点击 */
      display: none;          /* 初始隐藏 */
    }
  </style>
</head>
<body>
  <h1>Number Connection Test-10D</h1>

  <div id="test-container">
    <!-- 在容器内额外放一个 ghost ring 用于拖拽 -->
    <div id="ghost-ring"></div>
  </div>

  <div id="control-panel">
    <button id="refresh-btn">重新开始</button>
    <div id="message">请从1拖拽到2</div>
  </div>

  <div id="log"></div>

  <script>
    // -----------------------
    // 配置与数据结构
    // -----------------------
    const totalPoints = 10;        // 点的数量
    let circleRadius = 0;          // 圆环半径(px)，加载后计算
    let requiredDistance = 0;      // 点与点圆心间的最小距离(用于生成)
    let containerRect;             // test-container 容器的尺寸
    let pointsData = [];           // 存储点 { number, x, y } (像素坐标)
    let currentNumber = 1;         // 当前要连接到的数字（例：1->2时，表示正在处理1）
    let lastConnectedPoint = null; // 上次成功连接的点
    let testStarted = false;       // 是否已经开始
    let startTime = 0;            // 开始计时
    let finished = false;         // 是否完成
    let logData = [];             // 存储操作日志

    // 拖拽相关
    let isDragging = false;       // 是否正在拖拽
    let dragStartPoint = null;    // 拖拽开始的点数据({number, x, y})
    const ghostRingEl = document.getElementById('ghost-ring');

    // -----------------------
    // 页面初始化
    // -----------------------
    window.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById('test-container');
      containerRect = container.getBoundingClientRect();

      // 计算圆环半径(px) => 5% 的容器边长
      circleRadius = 0.05 * containerRect.width; 
      // 距离要求: 两圆心距离 > 2.3 * circleRadius
      requiredDistance = 2.3 * circleRadius;

      generatePoints();   // 生成并打乱点
      renderPoints();     // 渲染

      document.getElementById('refresh-btn').addEventListener('click', () => {
        location.reload(); 
      });

      // 监听 mousemove & mouseup
      // （因为要在容器区外松开鼠标也能检测到，最好挂在 window 上）
      window.addEventListener('mousemove', onMouseMove);
      window.addEventListener('mouseup', onMouseUp);
    });

    // -----------------------
    // 生成随机点(防重叠) & 洗牌
    // -----------------------
    function generatePoints() {
      const maxAttempts = 3000;
      let attempts = 0;

      while (pointsData.length < totalPoints && attempts < maxAttempts) {
        attempts++;
        const cx = randomInRange(circleRadius, containerRect.width - circleRadius);
        const cy = randomInRange(circleRadius, containerRect.height - circleRadius);

        let tooClose = false;
        for (let p of pointsData) {
          const dx = p.x - cx;
          const dy = p.y - cy;
          const dist = Math.sqrt(dx*dx + dy*dy);
          if (dist < requiredDistance) {
            tooClose = true;
            break;
          }
        }
        if (tooClose) continue;

        const idx = pointsData.length + 1; 
        pointsData.push({ number: idx, x: cx, y: cy });
      }

      if (pointsData.length < totalPoints) {
        alert("无法放置足够多的点，请调整参数。");
      }

      shuffleArray(pointsData);
    }

    // -----------------------
    // 在容器中渲染点
    // -----------------------
    function renderPoints() {
      const container = document.getElementById('test-container');
      container.innerHTML = ""; // 清空
      // 重新加回 ghostRingEl
      container.appendChild(ghostRingEl);

      pointsData.forEach((p) => {
        const pointEl = document.createElement('div');
        pointEl.className = 'point';
        const diameter = circleRadius * 2;
        pointEl.style.width  = diameter + 'px';
        pointEl.style.height = diameter + 'px';
        pointEl.style.fontSize = (0.8 * circleRadius) + 'px';
        pointEl.style.left = (p.x - circleRadius) + 'px';
        pointEl.style.top  = (p.y - circleRadius) + 'px';
        pointEl.textContent = p.number;

        // mousedown 事件：从某个环开始拖动 ghost ring
        pointEl.addEventListener('mousedown', (e) => {
          e.preventDefault();
          if (finished) return; // 已完成则不处理

          // 只有在点到当前Number（准备从这个点出发）时才允许拖拽
          if (p.number === currentNumber) {
            startDragging(p, e.clientX, e.clientY);
          }
        });

        container.appendChild(pointEl);
      });
    }

    // -----------------------
    // 开始拖拽
    // -----------------------
    function startDragging(pointData, mouseX, mouseY) {
      isDragging = true;
      dragStartPoint = pointData;

      // 如果是第一次成功点击/拖拽，则标记开始
      if (!testStarted) {
        testStarted = true;
        startTime = Date.now();
        document.getElementById('message').style.display = 'none';
      }

      // 初始化 ghost ring
      const diameter = circleRadius * 2;
      ghostRingEl.style.width  = diameter + 'px';
      ghostRingEl.style.height = diameter + 'px';
      ghostRingEl.style.display = 'block';

      // 让 ghost ring 的中心跟随当前鼠标位置
      positionGhostRing(mouseX, mouseY);
    }

    // -----------------------
    // mousemove：拖拽时，让 ghost ring 跟随鼠标
    // -----------------------
    function onMouseMove(e) {
      if (!isDragging) return;
      positionGhostRing(e.clientX, e.clientY);
    }

    // 调整 ghost ring 的位置，使其中心在 (mouseX, mouseY)
    function positionGhostRing(mouseX, mouseY) {
      // 相对于 test-container 左上角的偏移
      const offsetX = mouseX - containerRect.left;
      const offsetY = mouseY - containerRect.top;
      ghostRingEl.style.left = (offsetX - circleRadius) + 'px';
      ghostRingEl.style.top  = (offsetY - circleRadius) + 'px';
    }

    // -----------------------
    // mouseup：结束拖拽，判断是否连接成功
    // -----------------------
    function onMouseUp(e) {
      if (!isDragging) return;
      isDragging = false;
      ghostRingEl.style.display = 'none';

      // 判断 ghost ring 是否与下一号环 (currentNumber+1) 相交面积 > 10%
      const nextNumber = currentNumber + 1;
      const nextPoint = pointsData.find(p => p.number === nextNumber);
      if (!nextPoint) return; // 如果不存在(说明已经到最后)

      // 先获取 ghost ring 最终中心
      const mouseX = e.clientX - containerRect.left;
      const mouseY = e.clientY - containerRect.top;

      // 计算 ghost ring 与下一个环的相交面积
      const dist = getDistance(mouseX, mouseY, nextPoint.x, nextPoint.y);
      // 两圆半径都是 circleRadius
      const intersectionArea = getCircleIntersectionArea(dist, circleRadius, circleRadius);
      // 目标圆面积
      const circleArea = Math.PI * circleRadius * circleRadius;
      const ratio = intersectionArea / circleArea;

      if (ratio > 0.1) {
        // 连接成功
        recordLog('correct', {
          from: dragStartPoint.number,
          to: nextNumber
        });

        // 将 from 点样式改为 correct
        // 注意：仅在第一次连接 from 点时将它置为 correct
        // 如果想把 to 点也标记，可以在下一步把 nextNumber 的元素也设为 correct
        markPointCorrect(dragStartPoint.number);

        // 更新 currentNumber
        currentNumber++;

        // 检查是否完成
        if (currentNumber >= totalPoints) {
          // 说明刚才连接的是 9->10，10 已连接成功，测试完成
          finished = true;
          const usedTime = ((Date.now() - startTime) / 1000).toFixed(2);
          const msgEl = document.getElementById('message');
          msgEl.style.display = 'block';
          msgEl.textContent = "恭喜完成！耗时：" + usedTime + " 秒";
          showLog();
        } else {
          // 还未完成，提示下一步（如 “请从2拖拽到3”）
          if (!finished) {
            const msgEl = document.getElementById('message');
            msgEl.style.display = 'block';
            msgEl.textContent = "请从 " + currentNumber + " 拖拽到 " + (currentNumber+1);
          }
        }
      } else {
        // 连接失败
        recordLog('error', {
          from: dragStartPoint.number,
          to: nextNumber
        });

        // 如果想在失败时给出特殊提示，也可在此处执行
        if (!finished) {
          const msgEl = document.getElementById('message');
          msgEl.style.display = 'block';
          msgEl.textContent = 
            "连接失败！请从 " + currentNumber + " 再次拖拽到 " + (currentNumber+1);
        }
      }
    }

    // 给某个 number 的 circle 元素加上 `.correct` 样式
    function markPointCorrect(num) {
      const container = document.getElementById('test-container');
      const pointsEls = container.querySelectorAll('.point');
      pointsEls.forEach(el => {
        if (el.textContent == num) {
          el.classList.add('correct');
        }
      });
    }

    // -----------------------
    // 计算两个圆的相交面积（均为半径 r1, r2），距离为 d
    // -----------------------
    // 公式参考： https://mathworld.wolfram.com/Circle-CircleIntersection.html
    // 这里仅需 d < r1 + r2 情况下的交集面积
    function getCircleIntersectionArea(d, r1, r2) {
      // 如果两圆不相交
      if (d >= r1 + r2) return 0;
      // 如果其中一个圆被另一个完全包围
      if (d <= Math.abs(r1 - r2)) {
        // 返回较小圆的面积
        const rMin = Math.min(r1, r2);
        return Math.PI * rMin * rMin;
      }
      // 通用相交公式
      const r1Sq = r1 * r1;
      const r2Sq = r2 * r2;
      const alpha = Math.acos((d*d + r1Sq - r2Sq) / (2*d*r1)) * 2;
      const beta  = Math.acos((d*d + r2Sq - r1Sq) / (2*d*r2)) * 2;
      const area1 = 0.5 * r1Sq * (alpha - Math.sin(alpha));
      const area2 = 0.5 * r2Sq * (beta - Math.sin(beta));
      return area1 + area2;
    }

    // -----------------------
    // 工具与日志
    // -----------------------
    function recordLog(type, detail) {
      const now = Date.now();
      let offset = testStarted ? (now - startTime) : 0;
      offset = (offset / 1000).toFixed(2);

      if (type === 'correct') {
        logData.push({
          type: 'correct',
          from: detail.from,
          to: detail.to,
          time: offset
        });
      } else {
        logData.push({
          type: 'error',
          from: detail.from,
          to: detail.to,
          time: offset
        });
      }
    }

    function showLog() {
      const logDiv = document.getElementById('log');
      logDiv.style.display = 'block';
      let output = "操作日志：\n";
      logData.forEach((item, idx) => {
        if (item.type === 'correct') {
          output += `[${idx+1}] 正确连接 ${item.from} -> ${item.to}，相对开始时间: ${item.time}s\n`;
        } else {
          output += `[${idx+1}] 错误连接 ${item.from} -> ${item.to}，相对开始时间: ${item.time}s\n`;
        }
      });
      logDiv.textContent = output;
    }

    function randomInRange(min, max) {
      return Math.random() * (max - min) + min;
    }

    // Fisher–Yates 洗牌
    function shuffleArray(array) {
      let m = array.length;
      while (m > 0) {
        const i = Math.floor(Math.random() * m--);
        [array[m], array[i]] = [array[i], array[m]];
      }
      return array;
    }

    function getDistance(x1, y1, x2, y2) {
      const dx = x2 - x1;
      const dy = y2 - y1;
      return Math.sqrt(dx*dx + dy*dy);
    }
  </script>
</body>
</html>
